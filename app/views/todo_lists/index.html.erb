<div class="bg-blue-900 w-screen h-screen">
  <%# title and new button %>
  <div class="p-4 flex justify-between items-center top-0 z-10">
    <h1 class="text-2xl text-white font-bold">Todo Lists</h1>
    <div>
      <button id="new-list-btn" class="bg-green-500 text-white p-2 rounded">New Todo List</button>
    </div>
  </div>

  <%# form for list title, hidden  %>
  <div id="new-todo-list-form" class="p-4 hidden">
    <%= form_with url: todo_lists_path, remote: true, id: "new-todo-list-form-element" do |form| %>
      <%= form.text_field :title, placeholder: 'New List Title', class: 'border border-gray-300 rounded flex-grow', required: true, name: 'todo_list[title]' %>
      <%= form.submit 'Create List', class: 'ml-2 p-2 bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors' %>
    <% end %>
  </div>

  <div class="flex-1 p-4 h-full">
    <div id="list-horizontal-scroll" class="w-full h-screen">
      <div class="relative flex overflow-x-auto rounded h-5/6 m-2 bg-blue-400" id="scroll-inner">
        <%# lists %>
        <% @todo_lists.each do |list| %>
          <%= render partial: 'todo_list', locals: { todo_list: list } %>
        <% end %>
      </div>
    </div>
  </div>
</div>


<script>
// new list form 
const newListBtn = document.getElementById('new-list-btn');
const newTodoForm = document.getElementById('new-todo-list-form');

newListBtn.addEventListener('click', () => {
  newTodoForm.classList.toggle('hidden');
});

document.getElementById('new-todo-list-form-element').addEventListener('submit', function(event) {
  event.preventDefault();

  const formData = new FormData(this);

  fetch(this.action, {
    method: 'POST',
    headers: {
      'Accept': 'text/html',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: formData
  })
  .then(response => {
    if (!response.ok) throw new Error("Failed to create list");
    return response.text();
  })
  .then(html => {
    const todoListsContainer = document.getElementById('scroll-inner');
    todoListsContainer.insertAdjacentHTML('afterbegin', html);
    
    newTodoForm.classList.add('hidden');
    this.reset();
    
    const newListId = html.match(/menu-button-(\d+)/)[1]; 
    const menuButton = document.getElementById(`menu-button-${newListId}`);
    const menuOptions = document.getElementById(`menu-options-${newListId}`);
    menuButton.addEventListener('click', () => {
      menuOptions.classList.toggle('hidden');
    });
  })
  .catch(error => {
    console.error('Error:', error);
    alert('There was an error creating the new list.');
  });
});


// three-dot menu
document.querySelectorAll('[id^="menu-button-"]').forEach(button => {
  const menuId = button.id.replace('menu-button-', 'menu-options-');
  const menu = document.getElementById(menuId);
  
  button.addEventListener('click', () => {
    menu.classList.toggle('hidden');
  });
});


// creation of new items 
document.querySelectorAll('[id^="new-item-form-"]').forEach(form => {
  form.addEventListener('submit', (event) => {
    event.preventDefault(); 
    
    const formData = new FormData(form); 
    
    fetch(form.action, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: formData
    })
    .then(response => {
      if (!response.ok) throw new Error('Failed to create item');
      return response.json(); 
    })
    .then(data => {
      const targetListId = data.todo_list_id;
      const targetList = document.getElementById(`todo-items-list-${targetListId}`);

      // Insert the new item into the list
      targetList.innerHTML += `
        <li class="flex justify-between items-center hover:bg-blue-700 transition-colors p-2">
          <div class="flex-column items-center w-full">
            <input type="checkbox" id="item-${data.id}" class="mr-2 rounded focus:ring-blue-400">
            <label for="item-${data.id}" class="max-w-xs break-words text-white">${data.content}</label>
          </div>
        </li>`;
      
      form.reset(); // Reset the form after successful submission
    })
    .catch(error => {
      console.error('Error:', error); 
      alert('There was an error submitting the form');
    });
  });
});


</script>