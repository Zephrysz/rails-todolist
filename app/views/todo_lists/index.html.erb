<div class="bg-blue-900 w-screen h-screen overflow-hidden">
  <%# title and new button %>
  <div class="p-4 flex justify-between items-center top-0 z-10">
    <h1 class="text-2xl text-white font-bold">Todo Lists</h1>

    <%# form for list title, not hidden anymore  %>
    <div id="new-todo-list-form" class="">
      <%= form_with url: todo_lists_path, remote: true, id: "new-todo-list-form-element" do |form| %>
        <%= form.text_field :title, placeholder: 'New List Title', class: 'border border-gray-300 rounded flex-grow', required: true, name: 'todo_list[title]' %>
        <%= form.submit 'Create List', class: 'ml-2 p-2 bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors' %>
      <% end %>
    </div>
  </div>

  <div class="flex-1 p-4 h-screen">
    <div id="list-horizontal-scroll" class="w-full h-screen scale">
      <div class="relative flex overflow-x-auto rounded h-5/6 m-4 p-4 bg-blue-400 " id="scroll-inner">
        <%# lists %>
        <% @todo_lists.order(:position).each do |list| %>
          <%= render partial: 'todo_list', locals: { todo_list: list } %>
        <% end %>
      </div>
    </div>
  </div>
</div>


<script>

// checkbox functionality 
function changeCheckbox(listId, itemId, isChecked) {
    fetch(`/todo_lists/${listId}/todo_items/${itemId}/toggle_complete`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ completed: isChecked })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.completed === true || data.completed === false) {
           const checkbox = document.getElementById(`item-${itemId}`);
            checkbox.checked = data.completed; 
            console.log("Updated completion state:", data.completed);
        } else {
            console.error('Invalid response for completion state:', data.completed);
        }
    })
    .catch(error => {
        console.error('There was a problem with the fetch operation:', error);
    });
}

// drag and drop backend
function updateListOrder() {
    const listOrder = Array.from(document.querySelectorAll('.flex-shrink-0'))
        .map(list => list.getAttribute('data-id')); 

    fetch('/todo_lists/update_order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ order: listOrder })
    })
    .then(response => {
        if (!response.ok) throw new Error('Failed to update order');
        return response.json();
    })
    .then(data => {
        console.log('Order updated successfully:', data);
    })
    .catch(error => {
        console.error('Error updating order:', error);
    });
}

function setupListEventListeners(listElement) {
  // drag and drop 
  listElement.addEventListener('dragstart', (event) => {
    draggedList = event.target;
    event.target.classList.add('border-white', 'scale-105', 'shadow-lg', 'shadow-blue-500/50', 'transition-transform', 'duration-300');
  });

  listElement.addEventListener('dragend', (event) => {
    event.target.classList.remove('border-white', 'scale-105', 'shadow-lg', 'shadow-blue-500/50', 'transition-transform', 'duration-300');
  });

  listElement.addEventListener('dragover', (event) => {
    event.preventDefault();
    const targetList = event.target.closest('.flex-shrink-0');
    if (targetList && targetList !== draggedList) {
      targetList.classList.add('border-4', 'border-white');
    }
  });

  listElement.addEventListener('dragenter', (event) => {
    event.preventDefault();
    // const targetList = event.target.closest('.flex-shrink-0');
    // if (targetList && targetList !== draggedList) {
    //   targetList.classList.add('border-4', 'border-white');
    // }
  });

  listElement.addEventListener('dragleave', (event) => {
    event.preventDefault();
    const targetList = event.target.closest('.flex-shrink-0');
    if (targetList && targetList !== draggedList) {
      targetList.classList.remove('border-4', 'border-white');
    }
  });
  listElement.addEventListener('drop', (event) => {
    event.preventDefault();
    const targetList = event.target.closest('.flex-shrink-0');
    if (draggedList && targetList && draggedList !== targetList) {
      targetList.classList.remove('border-4', 'border-white');
      const parent = draggedList.parentNode;
      const draggedIndex = Array.from(parent.children).indexOf(draggedList);
      const targetIndex = Array.from(parent.children).indexOf(targetList);

      targetList.classList.remove('border-white', 'scale-105', 'shadow-lg', 'shadow-blue-500/50', 'transition-transform', 'duration-300');
      draggedList.classList.remove('border-white', 'scale-105', 'shadow-lg', 'shadow-blue-500/50', 'transition-transform', 'duration-300');

      const draggedListClone = draggedList.cloneNode(true);
      const targetListClone = targetList.cloneNode(true);


      parent.replaceChild(draggedListClone, targetList);
      parent.replaceChild(targetListClone, draggedList);

      setupListEventListeners(draggedListClone);
      setupListEventListeners(targetListClone);

      updateListOrder(); // Update order on the backend
    }
  });

  const checkboxes = listElement.querySelectorAll('input[type="checkbox"]');
  checkboxes.forEach(checkbox => {
    const itemId = checkbox.id.split('-')[1]; // Extract the item ID
    const listId = listElement.getAttribute('data-id'); // Extract the list ID
    const initialCompletedState = checkbox.getAttribute('data-completed') === 'true';
    checkbox.checked = initialCompletedState;
    checkbox.addEventListener('change', () => {
      changeCheckbox(listId, itemId, checkbox.checked);
    });
  });
  
  // three dot menu 
  const menuButton = listElement.querySelector('[id^="menu-button-"]');
  if (menuButton) {
    const menuId = menuButton.id.replace('menu-button-', 'menu-options-');
    const menu = document.getElementById(menuId);
    menuButton.addEventListener('click', () => {
      menu.classList.toggle('hidden');
    });
  }

  // item creation form 
  const newItemForm = listElement.querySelector('[id^="new-item-form-"]');
  if (newItemForm) {
    newItemForm.addEventListener('submit', function(event) {
      event.preventDefault();
      const formData = new FormData(this);

      fetch(this.action, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: formData
      })
      .then(response => {
        if (!response.ok) throw new Error('Failed to create item');
        return response.json();
      })
      .then(data => {
        const targetListId = data.todo_list_id;
        const targetList = document.getElementById(`todo-items-list-${targetListId}`);
        console.log(data);
        targetList.innerHTML += `
          <li class="flex justify-between items-center p-2 hover:bg-blue-700 transition-colors" id="todo-items-list-${targetListId}">
            <div class="flex-column items-center w-full">
              <input type="checkbox" id="item-${data.id}" class="mr-2 rounded" ${data.completed ? 'checked' : ''}>
              <label for="item-${data.id}" class="max-w-xs break-words text-white">${data.content}</label>
            </div>
          </li>`;
        const newCheckbox = document.getElementById(`item-${data.id}`);
        if (newCheckbox) {
          newCheckbox.addEventListener('change', () => {
            changeCheckbox(targetListId, data.id, newCheckbox.checked);
          });
        }
        this.reset();

      })
      .catch(error => {
        console.error('Error:', error);
        alert('There was an error submitting the form');
      });
    });
  }
}

// Call this function for all existing lists 
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('.flex-shrink-0').forEach(setupListEventListeners);
});

// new list creation and dynamic events 
document.getElementById('new-todo-list-form-element').addEventListener('submit', function(event) {
  event.preventDefault();

  const formData = new FormData(this);

  fetch(this.action, {
    method: 'POST',
    headers: {
      'Accept': 'text/html',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: formData
  })
  .then(response => {
    if (!response.ok) throw new Error("Failed to create list");
    return response.text();
  })
  .then(html => {
    const todoListsContainer = document.getElementById('scroll-inner');
    todoListsContainer.insertAdjacentHTML('afterbegin', html);

    this.reset();

    // Get the new list element and set up event listeners for it
    const newList = todoListsContainer.children[0]; 
    setupListEventListeners(newList); // Attach event listeners to the new list
  })
  .catch(error => {
    console.error('Error:', error);
    alert('There was an error creating the new list.');
  });
});

</script>